<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">
    
    <!-- Configures the annotation-driven Spring MVC Controller programming model.
	Note that, with Spring 3.0, this tag works in Servlet MVC only!  -->
    <mvc:annotation-driven>
    	<!-- <mvc:message-converters>
        	<bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
   		</mvc:message-converters> -->
    </mvc:annotation-driven>
    
    <!-- Activates various annotations to be detected in bean classes -->
    <context:annotation-config />
    
    <!-- Scans the classpath for annotated components that will be auto-registered as Spring beans.
 	For example @Controller and @Service. Make sure to set the correct base-package-->
    <context:component-scan base-package="com.jlearning.shopping.controller" />
    <context:component-scan base-package="com.jlearning.shopping.action" />
  	<context:component-scan base-package="com.jlearning.shopping.dao" />
 
 	<!-- General View Resolver maps the string returned by the controller to appropriate view file. -->
    <bean id="jspViewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
        <property name="order" value="1" />
    </bean>
    
    <!-- Reads tile definitions from tiles.xml and helps insert each attribute like header, footer
    in its appropriate place. -->
    <!-- <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
	</bean> -->
	
	<!-- Convenience subclass of UrlBasedViewResolver that supports TilesView (i.e. Tiles definitions) and custom subclasses of it. -->
 	<!-- Don't forget to set the order if you declared other ViewResolvers -->
 	<!-- See http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/servlet/view/tiles2/TilesViewResolver.html  -->
	<!-- Tiles View Resolver maps the string returned by the controller to appropriate tile definition. -->
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<property name="order" value="0"/>
	</bean>    
    
    <!-- Datasource Configuration -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
	    <property name="url" value="jdbc:mysql://localhost:3306/shopping_cart" />
	    <property name="username" value="shoppingcartuser" />
	    <property name="password" value="shoppingcart123" />
	</bean>
	
	<!-- Cassandra Datasource Configuration -->
    <bean id="cassandraCluster" class="com.jlearning.shopping.config.cassandra.CassandraCluster">
    	<constructor-arg>
    		<value>Test Cluster</value>
    	</constructor-arg>
	    <constructor-arg>
	    	<list value-type="java.net.InetSocketAddress">	    		
	    		<ref bean="inetHost1"/>
	    	</list>
	    </constructor-arg>
	    <constructor-arg ref="configuration"/>	    
	</bean> 
	
	<bean id="inetHost1" class="java.net.InetSocketAddress">
		<constructor-arg type="java.lang.String" value="127.0.0.1" />
		<constructor-arg value="9042" />
	</bean>
	
	<bean id="configuration" class="com.jlearning.shopping.config.cassandra.CassandraConfig">
		<constructor-arg ref="policies"/>
		<constructor-arg ref="poolingOptions"/>
	</bean>
	
	<bean id="policies" class="com.jlearning.shopping.config.cassandra.CassandraPolicies">
		<constructor-arg ref="lbPolicy"/>
	</bean>
	<bean id="lbPolicy" class="com.datastax.driver.core.policies.Policies" factory-method="defaultLoadBalancingPolicy"/>
	
	<bean id="poolingOptions" class="com.jlearning.shopping.config.cassandra.CassandraPoolingOptions">
		<constructor-arg name="coreConnectionsPerLocalHost" value="4"/>
		<constructor-arg name="maxConnectionsPerLocalHost" value="10"/>
		<constructor-arg name="coreConnectionsPerRemoteHost" value="2"/>
		<constructor-arg name="maxConnectionsPerRemoteHost" value="5"/>
		<constructor-arg name="heartbeatIntervalSeconds" value="60"/>
	</bean>
	
	<!-- Bind your shopping-cart-messages.properties -->
	<!-- ReloadableResourceBundleMessageSource loads the properties file from the specified location
	as opposed to ResourceBundleMessageSource which loads it from classpath only -->
	<bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		id="messageSource">
		<property name="basename" value="/WEB-INF/shopping-cart-messages" />
	</bean>
	
	<!-- Spring security config based on link https://www.toptal.com/java/rest-security-with-jwt-spring-security-and-java -->
	<!-- <security:global-method-security secured-annotations="enabled" />
	
	<security:http pattern="/" security="none"/>
	
	<security:http entry-point-ref="restAuthenticationEntryPoint" create-session="stateless">
		<security:csrf disabled="true"/>
		<security:custom-filter before="FORM_LOGIN_FILTER" ref="jwtAuthenticationFilter"/>
	</security:http>
    
    Custom JWT filter
    <bean id="jwtAuthenticationFilter" class="com.jlearning.shopping.security.JWTAuthenticationFilter">
    	<property name="authenticationManager" ref="authenticationManager" />
        <property name="authenticationSuccessHandler" ref="jwtAuthenticationSuccessHandler" />
    </bean>
    
    
    <bean id="restAuthenticationEntryPoint" class="com.jlearning.shopping.security.RestAuthenticationEntryPoint"/>
    <bean id="jwtAuthenticationSuccessHandler" class="com.jlearning.shopping.security.JWTAuthenticationSuccessHandler"/>
    <bean id="jwtAuthenticationProvider" class="com.jlearning.shopping.security.JWTAuthenticationProvider"/>
    
    
    <security:authentication-manager id="authenticationManager">
        <security:authentication-provider ref="jwtAuthenticationProvider"/>
    </security:authentication-manager> -->
	
</beans>